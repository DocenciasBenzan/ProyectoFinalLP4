@page "/colaboradores"
@attribute [Authorize]

<div class="card mb-3">
    <div class="card-header">
        <h5>Tareas del Colaborador</h5>
    </div>
    <div class="card-body">
        <table class="table table-hover">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Título</th>
                    <th scope="col">Descripción</th>
                    <th scope="col">Prioridad</th>
                    <th scope="col">Estado</th>
                    <th scope="col">Fecha de Creación</th>
                    <th scope="col">Fecha Límite</th>
                    <th scope="col">Creador</th>
                    <th scope="col">Colaboradores</th>
                    <th scope="col">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (ListaTareas.Any())
                {
                    @foreach (var tarea in ListaTareas)
                    {
                        <tr>
                            <th scope="row">@tarea.Id</th>
                            <td>@tarea.Titulo</td>
                            <td>@tarea.Descripcion</td>
                            <td>@tarea.Prioridad</td>
                            <td>@tarea.Estado</td>
                            <td>@tarea.FechaCreacion?.ToShortDateString()</td>
                            <td>@tarea.FechaLimite?.ToShortDateString()</td>
                            <td>
                                <span class="badge badge-success">@tarea.CreadorEmail</span>
                            </td>
                            <td>
                                @if (tarea.Colaboradores.Any())
                                {
                                    <ul class="list-unstyled">
                                        @foreach (var colaborador in tarea.Colaboradores)
                                        {
                                            <li>
                                                <span class="badge badge-primary">@colaborador.ColaboradorEmail</span>
                                            </li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <span class="badge badge-secondary">Sin colaboradores</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary">
                                    <i class="fas fa-comment"></i> Agregar Comentario
                                </button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="10" class="text-center">No hay tareas disponibles.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private string CorreoUsuarioActual = string.Empty;
    private List<TareaDto> ListaTareas = new();

    protected override async Task OnInitializedAsync()
    {
        var estadoAutenticacion = await ProveedorEstadoAutenticacion.GetAuthenticationStateAsync();
        var usuario = estadoAutenticacion.User;

        if (usuario.Identity?.IsAuthenticated == true)
        {
            CorreoUsuarioActual = usuario.FindFirst(c => c.Type == ClaimTypes.Email)?.Value ?? string.Empty;
            await ConsultarTareasColaborador();
        }
    }

    private async Task ConsultarTareasColaborador()
    {
        var resultado = await ServicioTareas.ObtenerTareasPorColaborador(CorreoUsuarioActual);

        if (resultado.Succesd)
        {
            ListaTareas = resultado.Data?.ToList() ?? new List<TareaDto>();
        }
        else
        {
            ListaTareas = new List<TareaDto>();
        }
    }
}
