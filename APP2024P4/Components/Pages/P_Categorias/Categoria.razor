@rendermode InteractiveServer
@attribute [StreamRendering]

@page "/Categorias"

<div style="display:flex; flex-direction:row;">
    <div style="width:10%; margin-left:10px; "> 
        </div>
    <div style="width:80%; ">
<h3>Agregar Categorias</h3>
@if (ShowForm)
{
    @* Formularion de accion*@
    <div class="card">
        <h5 class="card-header">@Accion producto</h5>
        <div class="card-body">
            <div class="mb-3">
                <label for="nombre" class="form-label">Nombre</label>
                <input @bind-value="MiCategoria.Nombre" type="text" class="form-control" id="nombre" placeholder="Nombre" disabled="@DisableInputs">
            </div>

            @if (Accion != Constants.Acciones.Ver)
            {
                <span class="btn btn-primary" @onclick="Aceptar">Aceptar</span>
            }
            <span class="btn btn-danger" @onclick="btnCancelarClick">Cancelar</span>
        </div>
    </div>
}
else
{
    @if (CategoriaList != null)
    {
        @* Formularion de los registros*@
        <div class="card mb-3 mt-3" >
                    <div onclick="@btnAgregarClick" class="card-header">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" class="bi bi-plus-square-fill" viewBox="0 0 16 16">
                            <path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm6.5 4.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3a.5.5 0 0 1 1 0" />
                        </svg>
                    </div>
            <div class="card-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Nombre</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (CategoriaList.Count > 0)
                        {
                            @foreach (var c in CategoriaList)
                            {
                                <tr>
                                    <th scope="row">@c.Id</th>
                                    <td>@c.Nombre</td>
                                    <td>
                                        <div class="btn-group" role="group" aria-label="Basic mixed styles example">
                                            <span @onclick="()=>btnEditarClick(c)" class="btn btn-outline-warning">Editar</span>
                                            <span @onclick="()=>btnEliminarClick(c)" class="btn btn-outline-danger">Eliminar</span>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
                <div class="spinner-grow text-danger" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>

                <div class="spinner-grow text-danger" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>

                <div class="spinner-grow text-danger" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
    }
}
    </div>
</div>



@code {
    #region Propiedades del componente Index.Razor
    public List<ProductoDto> Productos { get; set; } = new();
    public string Accion { get; set; } = "Registrar";
    public CategoriaRequest MiCategoria { get; set; } = new();

    public List<CategoriaDto>? CategoriaList { get; set; }
    bool ShowForm = false, DisableInputs = false;
    #endregion Propiedades del componente Index.Razor

    #region Metodos del ciclo de vida de la aplicacion (para este componente)
    protected override async Task OnInitializedAsync()
    {
        await Consultar();
    }
    #endregion Metodos del ciclo de vida de la aplicacion (para este componente)

    #region Eventos
    public void btnAgregarClick()
    {
        Accion = Constants.Acciones.Registrar;
        ShowForm = true;
        StateHasChanged();
        DisableInputs = false;
    }
    public void btnEditarClick(CategoriaDto dto)
    {
        Accion = Constants.Acciones.Modificar;
        ShowForm = true;
        DisableInputs = false;
        MiCategoria = dto.ToRequest();
    }
    public void btnEliminarClick(CategoriaDto dto)
    {
        Accion = Constants.Acciones.Eliminar;
        ShowForm = true;
        DisableInputs = true;
        MiCategoria = dto.ToRequest();
    }

    public void btnCancelarClick()
    {
        Limpiar();
    }
    #endregion Eventos

    #region Métodos
    async Task Consultar()
    {
        try
        {
            var result = await categoriaService.GetAll();
            if (result.Succesd && result.Data != null)
            {
                CategoriaList = result.Data.ToList();
            }
            else
            {
                CategoriaList = new List<CategoriaDto>();
            }
        }
        catch (Exception ex)
        {
            // Manejo de errores en caso de fallo
            Console.WriteLine($"Error al consultar categorías: {ex.Message}");
            CategoriaList = new List<CategoriaDto>();
        }
    }

    public void Limpiar()
    {
        ShowForm = false;

    }
    public async Task Aceptar()
    {
        Result r =
        Accion == Constants.Acciones.Registrar ? await categoriaService.Create(MiCategoria) :
        Accion == Constants.Acciones.Modificar ? await categoriaService.Update(MiCategoria) :
        Accion == Constants.Acciones.Eliminar ? await categoriaService.Delete(MiCategoria.Id) :
        Result.Failure("Accion no soportada");
        if (r.Succesd)
        {
            await Consultar();
            Limpiar();
        }
    }
    #endregion Métodos
}