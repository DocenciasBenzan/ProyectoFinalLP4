<h3>Productos</h3>
@if (ShowForm)
{
    @* Formularion de accion *@
    <div class="card">
        <h5 class="card-header">@Accion producto</h5>
        <div class="card-body">
            <div class="mb-3">
                <label for="nombre" class="form-label">Nombre</label>
                <input @bind-value="MiProducto.Nombre" type="text" class="form-control" id="nombre" placeholder="Nombre" disabled="@DisableInputs">
            </div>
            <div class="mb-3">
                <label for="img" class="form-label">Imagen</label>
                <InputFile OnChange="SubirImagen" />
                @if (MiProducto.Img != null && MiProducto.Img.Length > 0)
                {
                    <img src="@($"data:image/png;base64,{Convert.ToBase64String(MiProducto.Img)}")" alt="Imagen seleccionada" style="max-width: 100%; height: auto; margin-top: 10px;" />
                }
            </div>
            <div class="mb-3">
                <label for="categoria" class="form-label">Categoría</label>
                <select @bind="@MiProducto.CategoriaId" id="categoria" class="form-select">
                    <option disabled selected>Seleccione una categoría</option>
                    @if (Categorias != null)
                    {
                        @foreach (var categoria in Categorias)
                        {
                            <option value="@categoria.Id">@categoria.Nombre</option>
                        }
                    }
                    }
                </select>
            </div>
            <div class="mb-3">
                <label for="precio" class="form-label">Precio (RD$)</label>
                <input @bind="MiProducto.Precio" type="text" class="form-control" id="precio" disabled="@DisableInputs"></input>
            </div>
            @if (Accion != Constants.Acciones.Ver)
            {
                <span class="btn btn-primary" @onclick="Aceptar">Aceptar</span>
            }
            <span class="btn btn-danger" @onclick="btnCancelarClick">@(Accion != Constants.Acciones.Ver ? "Cancelar" : "Salir")</span>
        </div>
    </div>
}
else
{
    @if (ProductoList != null)
    {
        @* Formulario de los registros *@
        <div class="card mb-3 mt-3">
            <div class="card-header">
                <span class="btn btn-success" @onclick="btnAgregarClick">+</span>
            </div>
            <div class="card-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Nombre</th>
                            <th scope="col">Categoría</th>
                            <th scope="col">Precio</th>
                            <th scope="col">Imagen</th>
                            <th scope="col">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (ProductoList.Count > 0)
                        {
                            @foreach (var p in ProductoList)
                            {
                                <tr>
                                    <th scope="row">@p.Id</th>
                                    <td>@p.Nombre</td>
                                    <td>@p.Categoria</td>
                                    <td>@p.PrecioText</td>
                                    <td>
                                        @if (p.Img != null && p.Img.Length > 0)
                                        {
                                            <img src="@p.ImagenUrl" alt="Imagen de Producto" style="max-width: 100px; height: auto;" />
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group" aria-label="Basic mixed styles example">
                                            <span @onclick="()=>btnEditarClick(p)" class="btn btn-outline-warning">Editar</span>
                                            <span @onclick="()=>btnEliminarClick(p)" class="btn btn-outline-danger">Eliminar</span>
                                            <span @onclick="()=>btnVerClick(p)" class="btn btn-outline-primary">Ver</span>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="spinner-border text-danger" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
}


@code {
    #region Propiedades del componente Index.Razor
    public List<CategoriaDto> Categorias { get; set; } = new();
    public string Accion { get; set; } = "Registrar";
    public ProductoRequest MiProducto { get; set; } = new();

    public List<ProductoDto>? ProductoList { get; set; }
    bool ShowForm = false, DisableInputs = false;
    #endregion Propiedades del componente Index.Razor

    #region Metodos del ciclo de vida de la aplicacion (para este componente)
    protected override async Task OnInitializedAsync()
    {
        await ConsultarCategorias();
        await Consultar();
    }
    #endregion Metodos del ciclo de vida de la aplicacion (para este componente)

    #region Eventos
    public void btnAgregarClick()
    {
        Accion = Constants.Acciones.Registrar;
        ShowForm = true;
        StateHasChanged();
        DisableInputs = false;
    }
    public void btnEditarClick(ProductoDto dto)
    {
        Accion = Constants.Acciones.Modificar;
        ShowForm = true;
        DisableInputs = false;
        MiProducto = dto.ToRequest();
    }
    public void btnEliminarClick(ProductoDto dto)
    {
        Accion = Constants.Acciones.Eliminar;
        ShowForm = true;
        DisableInputs = true;
        MiProducto = dto.ToRequest();
    }
    public void btnVerClick(ProductoDto dto)
    {
        Accion = Constants.Acciones.Ver;
        ShowForm = true;
        DisableInputs = true;
        MiProducto = dto.ToRequest();
    }
    public void btnCancelarClick()
    {
        Limpiar();
    }
    public async Task SubirImagen(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        if (archivo != null)
        {
            using var stream = new MemoryStream();
            await archivo.OpenReadStream().CopyToAsync(stream);
            MiProducto.Img = stream.ToArray();  // Almacena la imagen como bytes
        }
    }
    #endregion Eventos

    #region Métodos
    async Task ConsultarCategorias()
    {
        var result = await categoriaService.GetAll();
        if (result.Succesd)
        {
            Categorias = result.Data?.ToList() ?? new List<CategoriaDto>();
        }
    }
    async Task Consultar()
    {
        var result = await service.Get();
        if (result.Succesd)
        {
            ProductoList = result.Data?.ToList() ?? new List<ProductoDto>();
        }
    }
    public void Limpiar()
    {
        ShowForm = false;
        MiProducto = new();
    }
    public async Task Aceptar()
    {
        Result r = Accion switch
        {
            Constants.Acciones.Registrar => await service.Create(MiProducto),
            Constants.Acciones.Modificar => await service.Update(MiProducto),
            Constants.Acciones.Eliminar => await service.Delete(MiProducto.Id),
            Constants.Acciones.Ver => Result.Success(""),
            _ => Result.Failure("Accion no soportada"),
        };

        if (r.Succesd)
        {
            await Consultar();
            Limpiar();
        }
    }
    #endregion Métodos
}
