@page "/empleados"
@inject IEmpleadoServicio empleadoService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3 class="text-center my-4">Gestión de Empleados</h3>

@if (MostrarForm)
{
	<!-- Formulario para agregar/editar empleados -->
	<div class="card shadow-sm mb-4">
		<div class="card-header bg-primary text-white">
			<h5>@(empleadoActual.Id == 0 ? "Agregar Nuevo Empleado" : "Editar Empleado")</h5>
		</div>
		<div class="card-body">
			<EditForm Model="empleadoActual" OnValidSubmit="GuardarEmpleado">
				<DataAnnotationsValidator />
				<ValidationSummary></ValidationSummary>
				<div class="row">
					<div class="col-md-6 mb-3">
						<label for="nombre" class="form-label">Nombre</label>
						<InputText @bind-Value="empleadoActual.Nombre" class="form-control" placeholder="Ejemplo: Juan" />
					</div>
					<div class="col-md-6 mb-3">
						<label for="apellido" class="form-label">Apellido</label>
						<InputText @bind-Value="empleadoActual.Apellido" class="form-control" placeholder="Ejemplo: Pérez" />
					</div>
					<div class="col-md-6 mb-3">
						<label for="telefono" class="form-label">Teléfono</label>
						<InputText @bind-Value="empleadoActual.Telefono" class="form-control" placeholder="Ejemplo: 123-456-7890" />
					</div>
					<div class="col-md-6 mb-3">
						<label for="correo" class="form-label">Correo Electrónico</label>
						<InputText @bind-Value="empleadoActual.CorreoElectronico" class="form-control" placeholder="Ejemplo: JuanPeres54@gmail.com" />
					</div>
					<div class="col-md-6 mb-3">
						<label for="horarioEntrada" class="form-label">Horario de Entrada</label>
						<input @bind-value="empleadoActual.InicioTrabajo" class="form-control" type="time" />
					</div>
					<div class="col-md-6 mb-3">
						<label for="horarioSalida" class="form-label">Horario de Salida</label>
						<input @bind-value="empleadoActual.FinTrabajo" class="form-control" type="time" />
					</div>
				</div>

				<div class="d-flex justify-content-between">
					<button type="submit" class="btn btn-primary col-5">
						@(empleadoActual.Id == 0 ? "Crear" : "Editar")
					</button>
					<button type="button" class="btn btn-danger col-5" @onclick="CancelarEdicion">
						<i class="bi bi-x-circle"></i> Cancelar
					</button>
				</div>
			</EditForm>
		</div>
	</div>
}
else
{
	<div class="mb-4">
		<span class="btn btn-outline-primary" @onclick="()=>{MostrarForm = true;}">
			<i class="bi bi-file-plus"></i> Agregar Empleado
		</span>
	</div>

	@if (empleados != null && empleados.Any())
	{
		<!-- Tabla para listar empleados -->
		<div class="table-responsive">
			<table class="table table-striped table-hover">
				<thead class="table-dark">
					<tr>
						<th>Nombre</th>
						<th>Correo</th>
						<th>Teléfono</th>
						<th>Acciones</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var empleado in empleados)
					{
						<tr>
							<td>@empleado.Nombre</td>
							<td>@empleado.CorreoElectronico</td>
							<td>@empleado.Telefono</td>
							<td >
								<button @onclick="() => EditarEmpleado(empleado)" class="btn btn-outline-primary btn-sm">
									<i class="bi bi-pencil"></i> Editar
								</button>
								<button @onclick="() => EliminarEmpleado(empleado.Id)" class="btn btn-outline-danger btn-sm">
									<i class="bi bi-trash"></i> Eliminar
								</button>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}
	else
	{
		<p class="text-center">Sin empleados registrados</p>
		<span class="btn btn-outline-info" @onclick="()=>{MostrarForm = true;}">
			<i class="bi bi-file-plus"></i> Agregar Empleado
		</span>
	}
}

@code {
	private List<EmpleadoResponse> empleados;
	private EmpleadoRequest empleadoActual = new();
	public bool MostrarForm { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await CargarEmpleados();
	}

	private async Task CargarEmpleados()
	{
		var result = await empleadoService.ObtenerEmpleados();
		if (result.Succeeded)
		{
			empleados = result?.Data?.ToList() ?? new();
		}
	}

	private async Task GuardarEmpleado()
	{
		if (empleadoActual.Id == 0)
		{
			var result = await empleadoService.AgregarEmpleado(empleadoActual);
			if (result.Succeeded)
			{
				await CargarEmpleados();
				MostrarForm = false;
				empleadoActual = new();
			}
		}
		else
		{
			var result = await empleadoService.ActualizarEmpleado(empleadoActual);
			if (result.Succeeded)
			{
				await CargarEmpleados();
				empleadoActual = new();
				MostrarForm = false;
			}
		}
	}

	private void EditarEmpleado(EmpleadoResponse empleado)
	{
		empleadoActual = new EmpleadoRequest
			{
				Id = empleado.Id,
				Nombre = empleado.Nombre,
				Apellido = empleado.Apellido,
				CorreoElectronico = empleado.CorreoElectronico,
				Telefono = empleado.Telefono,
				InicioTrabajo = empleado.InicioTrabajo,
				FinTrabajo = empleado.FinTrabajo
			};
		MostrarForm = true;
	}

	private async Task EliminarEmpleado(int id)
	{
		var result = await empleadoService.EliminarEmpleado(id);
		if (result.Succeeded)
		{
			await CargarEmpleados();
		}
	}

	private void CancelarEdicion()
	{
		empleadoActual = new();
		MostrarForm = false;
	}
}
