@page "/empleados"
@inject IEmpleadoServicio empleadoService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Gestión de Empleados</h3>



@if (MostrarForm)
{
	<!-- Formulario para agregar/editar empleados -->
	<EditForm Model="empleadoActual" OnValidSubmit="GuardarEmpleado">
		<DataAnnotationsValidator />
		<ValidationSummary></ValidationSummary>
		<div class="mb-3">
			<label for="nombre" class="form-label">Nombre</label>
			<InputText @bind-Value="empleadoActual.Nombre" class="form-control" placeholder="Ejemplo: Juan" />
		</div>
		<div class="mb-3">
			<label for="apellido" class="form-label">Apellido</label>
			<InputText @bind-Value="empleadoActual.Apellido" class="form-control" placeholder="Ejemplo: Pérez" />
		</div>
		<div class="mb-3">
			<label for="telefono" class="form-label">Teléfono</label>
			<InputText @bind-Value="empleadoActual.Telefono" class="form-control" placeholder="Ejemplo: 123-456-7890" />
		</div>
		<div class="mb-3">
			<label for="correo" class="form-label">Correo Electronico</label>
			<InputText @bind-Value="empleadoActual.CorreoElectronico" class="form-control" placeholder="Ejemplo: JuanPeres54@gmail.com" />
		</div>
		<div class="mb-3">
			<label for="horarioEntrada" class="form-label">Horario de Entrada</label>
			<input @bind-value="empleadoActual.InicioTrabajo" class="form-control" type="time" />
		</div>
		<div class="mb-3">
			<label for="horarioSalida" class="form-label">Horario de Salida</label>
			<input @bind-value="empleadoActual.FinTrabajo" class="form-control" type="time" />

		</div>
		<div class="d-flex gap-2 mt-3">
			<button type="submit" class="btn btn-success col-9"> @(empleadoActual.Id == 0 ? "Crear" : "Editar")</button>
			<span class="btn btn-outline-dark col-3" @onclick="CancelarEdicion">
				<i class="bi bi-x-circle"></i>
				Cancelar
			</span>
		</div>
	</EditForm>

}
else
{
	<span class="btn btn-outline-dark" @onclick="()=>{MostrarForm = true;}">
		<i class="bi bi-file-plus"></i>
		Agregar Empleado
	</span>
	@if (empleados != null && empleados.Any())
	{

		<!-- Tabla para listar empleados -->
		<table class="table">
			<thead>
				<tr>
					<th>Id</th>
					<th>Nombre</th>
					<th>Correo</th>
					<th>Teléfono</th>
					<th>Acciones</th>
				</tr>
			</thead>
			<tbody>
				@if (empleados != null)
				{
					@foreach (var empleado in empleados)
					{
						<tr>
							<td>@empleado.Id</td>
							<td>@empleado.Nombre</td>
							<td>@empleado.CorreoElectronico</td>
							<td>@empleado.Telefono</td>
							<td>
								<button @onclick="() => EditarEmpleado(empleado)" class="btn btn-warning">Editar</button>
								<button @onclick="() => EliminarEmpleado(empleado.Id)" class="btn btn-danger">Eliminar</button>
							</td>
						</tr>
					}
				}
				else
				{
					<tr>
						<td colspan="5">Cargando empleados...</td>
					</tr>
				}
			</tbody>
		</table>
	}
	else
	{
		<p>Sin empleados registrados</p>
		<span class="btn btn-outline-info" @onclick="()=>{MostrarForm = true;}">
			<i class="bi bi-file-plus"></i>
			Agregar Empleado
		</span>
	}
}
@code {
	private List<EmpleadoResponse> empleados;
	private EmpleadoRequest empleadoActual = new();
	public bool MostrarForm { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await CargarEmpleados();

	}

	private async Task CargarEmpleados()
	{
		var result = await empleadoService.ObtenerEmpleados();
		if (result.Succeeded)
		{
			empleados = result?.Data?.ToList() ?? new();
		}
	}

	private async Task GuardarEmpleado()
	{
		if (empleadoActual.Id == 0)
		{
			var result = await empleadoService.AgregarEmpleado(empleadoActual);
			if (result.Succeeded)
			{
				await CargarEmpleados();
				MostrarForm = false;
				empleadoActual = new();
			}
		}
		else
		{
			var result = await empleadoService.ActualizarEmpleado(empleadoActual);
			if (result.Succeeded)
			{
				await CargarEmpleados();
				empleadoActual = new();
				MostrarForm = false;

			}
		}
	}

	private void EditarEmpleado(EmpleadoResponse empleado)
	{

		empleadoActual = new EmpleadoRequest
			{
				Id = empleado.Id,
				Nombre = empleado.Nombre,
				Apellido = empleado.Apellido,
				CorreoElectronico = empleado.CorreoElectronico,
				Telefono = empleado.Telefono,
				InicioTrabajo = empleado.InicioTrabajo,
				FinTrabajo = empleado.FinTrabajo
			};
		MostrarForm = true;
	}

	private async Task EliminarEmpleado(int id)
	{
		var result = await empleadoService.EliminarEmpleado(id);
		if (result.Succeeded)
		{
			await CargarEmpleados();
		}
	}

	private void CancelarEdicion()
	{
		empleadoActual = new();
		MostrarForm = false;

	}
}