@page "/empleados"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IEmpleadoServicio EmpleadoServ

<PageTitle>Empleados</PageTitle>

<h1 class="text-center mb-4">Gestión de Empleados</h1>

<div class="container mt-4">
	<!-- Botón para agregar un nuevo empleado -->
	<div class="d-flex justify-content-end mb-3">
		<button class="btn btn-primary d-flex align-items-center" @onclick="()=>{MostrarAgregar =!MostrarAgregar;}">
			@if (MostrarAgregar)
			{
				<i class="bi bi-dash-circle">Cancelar</i>
			}
			else
			{
				<i class="bi bi-plus-circle me-2">Nuevo Empleado</i>
			}
		</button>
	</div>

	<!-- Tabla de empleados -->
	@if (TodosEmpleados == null)
	{
		<p class="text-center"><em>Cargando...</em></p>
	}
	else if (!TodosEmpleados.Any())
	{
		<p class="text-center"><em>No hay empleados registrados.</em></p>
	}
	else
	{
		<div class="table-responsive">
			<table class="table table-bordered table-striped table-hover align-middle">
				<thead class="table-dark">
					<tr>
						<th>Nombre</th>
						<th>Horario de Entrada</th>
						<th>Horario de Salida</th>
						<th class="text-center">Acciones</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var em in TodosEmpleados)
					{
						<tr>
							<td>@em.Nombre</td>
							<td>@em.InicioTrabajo.ToString("hh:mm tt")</td>
							<td>@em.FinTrabajo.ToString("hh:mm tt")</td>
							<td class="text-center">
								<button class="btn btn-warning btn-sm mx-2" title="Ver">
									<i class="bi bi-eye"></i>
								</button>
								<button class="btn btn-danger btn-sm" @onclick="() => EliminarEmpleado(em.Id)" title="Eliminar">
									<i class="bi bi-trash"></i>
								</button>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}
</div>

@if (MostrarAgregar)
{

	<EditForm Model="nuevoEmpleado" OnValidSubmit="AgregarEmpleado">
		<DataAnnotationsValidator />
		<ValidationSummary></ValidationSummary>
		<div class="mb-3">
			<label for="nombre" class="form-label">Nombre</label>
			<InputText @bind-Value="nuevoEmpleado.Nombre" class="form-control" placeholder="Ejemplo: Juan" />
		</div>
		<div class="mb-3">
			<label for="apellido" class="form-label">Apellido</label>
			<InputText @bind-Value="nuevoEmpleado.Apellido" class="form-control" placeholder="Ejemplo: Pérez" />
		</div>
		<div class="mb-3">
			<label for="telefono" class="form-label">Teléfono</label>
			<InputText @bind-Value="nuevoEmpleado.Telefono" class="form-control" placeholder="Ejemplo: 123-456-7890" />
		</div>
		<div class="mb-3">
			<label for="correo" class="form-label">Correo Electronico</label>
			<InputText @bind-Value="nuevoEmpleado.CorreoElectronico" class="form-control" placeholder="Ejemplo: JuanPeres54@gmail.com" />
		</div>
		<div class="mb-3">
			<label for="horarioEntrada" class="form-label">Horario de Entrada</label>
			<input @bind-value="nuevoEmpleado.InicioTrabajo" class="form-control" type="time" />
		</div>
		<div class="mb-3">
			<label for="horarioSalida" class="form-label">Horario de Salida</label>
			<input @bind-value="nuevoEmpleado.FinTrabajo" class="form-control" type="time" />

		</div>
		<button type="submit" class="btn btn-success w-100">Guardar Empleado</button>
	</EditForm>

}
@code {

	private List<EmpleadoResponse> TodosEmpleados = new();
	private EmpleadoRequest nuevoEmpleado = new();
	public bool MostrarAgregar { get; set; }

	protected override async void OnInitialized()
	{
		base.OnInitialized();
		nuevoEmpleado.FinTrabajo = nuevoEmpleado.InicioTrabajo.AddHours(8);
		await CargarEmpleados();
	}
	private async Task CargarEmpleados()
	{
		var r = await EmpleadoServ.ObtenerEmpleados();
		if (r.Succeeded)
		{
			TodosEmpleados = r?.Data?.ToList() ?? new();
		}
		else
		{
			Console.WriteLine($"Error al obtener los empleados {r.Message}");
		}
		StateHasChanged();
	}
	private async Task AgregarEmpleado()
	{
		if (nuevoEmpleado != null)
		{
			await EmpleadoServ.AgregarEmpleado(nuevoEmpleado);
			await CargarEmpleados();
			MostrarAgregar = false;
			// Resetear formulario
			nuevoEmpleado = new EmpleadoRequest();
		}
	}

	private async Task EliminarEmpleado(int empleadoId)
	{
		await EmpleadoServ.EliminarEmpleado(empleadoId);
		await CargarEmpleados();
		StateHasChanged();
	}
}
