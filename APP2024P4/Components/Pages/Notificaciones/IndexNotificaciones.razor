
@rendermode InteractiveServer
@attribute [StreamRendering]
@attribute [Authorize]
@page "/notificaciones"

<div class="card">
    <div class="card-header">
        Notificaciones
    </div>
    <div class="card-body">
        @if (Notifications.Count > 0)
        {
            @foreach (var p in Notifications)
            {
                <div class="card mb-3">
                    <div class="card-header ">Para: @p.RenderEmail </div>
                    <div class="card-body">
                        <h5 class="card-title">Invitacion a colaborar</h5>
                        <span class="btn btn-primary" @onclick="() => btnAgregarClick(p.Id,p.TareaId)">Aceptar</span>
                        <span class="btn btn-primary" @onclick="() => btnEliminarClick(p.Id)">Rechazar</span>
                    </div>
                    <div class="card-footer">Enviado por @p.SenderEmail</div>
                </div>
            }
        }
    </div>
</div>

@code {

    public ColaboradorRequest Micolaborador { get; set; } = new();
    private ClaimsPrincipal? currentUser;
    private List<NotificacionDto> Notifications = new();
    private string CurrentUserEmail = null!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity!.IsAuthenticated)
        {
            CurrentUserEmail = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value!;
        }
        await ConsultarNotificaciones();
    }

    public async Task btnAgregarClick(int notificationId, int tareaId)
    {
        try
        {
            var userId = currentUser?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId)) return;
            // Responder a la invitación y agregar colaborador
            var result = await NotificationService.RespondToInvitationAsync(notificationId, true, userId, tareaId);
            if (result.Succesd)
            {
                // Actualizar las notificaciones
                await ConsultarNotificaciones();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"☠️ Error: {ex.Message}");
        }
    }

    public async Task ConsultarNotificaciones()
    {
        var result = await NotificationService.GetNotificacionByEmail(CurrentUserEmail);
        if (result.Succesd)
        {
            Notifications =
            result.Data?.ToList()??
            new List<NotificacionDto>();
        }
    }

    public async Task btnEliminarClick(int notificationId)
    {
        await NotificationService.Delete(notificationId);
    }
}
