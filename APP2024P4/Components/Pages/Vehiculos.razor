@inject IVehiculoServicio VehiculoServicio
@rendermode InteractiveServer

@page "/vehiculos"
<h3>Gestión de Vehículos</h3>

@if (loading)
{
	<p>Cargando vehículos...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
	<p class="text-danger">@errorMessage</p>
}
else
{
	<button class="btn btn-primary mb-3" @onclick="MostrarFormularioAgregar">Agregar Vehículo</button>

	<table class="table table-striped">
		<thead>
			<tr>
				<th>Placa</th>
				<th>Marca</th>
				<th>Modelo</th>
				<th>Color</th>
				<th>Tipo</th>
				<th>Acciones</th>
			</tr>
		</thead>
		<tbody>
			@if (vehiculos != null && vehiculos.Any())
			{
				@foreach (var vehiculo in vehiculos)
				{
					<tr>
						<td>@vehiculo.Placa</td>
						<td>@vehiculo.Marca</td>
						<td>@vehiculo.Modelo</td>
						<td>@vehiculo.Color</td>
						<td>@vehiculo.Tipo</td>
						<td>
							<button class="btn btn-warning btn-sm me-2" @onclick="() => EditarVehiculo(vehiculo.Id)">Editar</button>
							<button class="btn btn-danger btn-sm" @onclick="() => EliminarVehiculo(vehiculo.Id)">Eliminar</button>
						</td>
					</tr>
				}
			}
			else
			{
				<tr>
					<td colspan="6" class="text-center">No se encontraron vehículos.</td>
				</tr>
			}
		</tbody>
	</table>
}

@if (mostrarFormulario)
{
	<EditForm Model="vehiculoFormulario" OnValidSubmit="GuardarVehiculo" FormName="RegistrarVehiculo">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="mb-3">
			<label for="placa" class="form-label">Placa</label>
			<InputText id="placa" class="form-control" @bind-Value="vehiculoFormulario.Placa" />
		</div>
		<div class="mb-3">
			<label for="marca" class="form-label">Marca</label>
			<input list="options" id="marca" name="marca" @bind-value="vehiculoFormulario.Marca" placeholder="Escribe o selecciona">
			<datalist id="options">
				@foreach (var marca in Marcas)
				{
					<option value="@marca"></option>
				}
			</datalist>
		</div>
		<div class="mb-3">
			<label for="modelo" class="form-label">Modelo</label>
			<input list="modeloOptions" id="modelo" name="modelo" @bind-value="vehiculoFormulario.Modelo" placeholder="Escribe o selecciona">
			<datalist id="modeloOptions">
				@foreach (var modelo in Modelos)
				{
					<option value="@modelo"></option>
				}
			</datalist>
		</div>
		<div class="mb-3">
			<label for="color" class="form-label">Color</label>
			<input list="colorOptions" id="color" name="color" @bind-value="vehiculoFormulario.Color" placeholder="Escribe o selecciona">
			<datalist id="colorOptions">
				@foreach (var color in Colores)
				{
					<option value="@color"></option>
				}
			</datalist>
		</div>
		<div class="mb-3">
			<label for="tipo" class="form-label">Tipo</label>
			<input list="tipoOptions" id="tipo" name="tipo" @bind-value="vehiculoFormulario.Tipo" placeholder="Escribe o selecciona">
			<datalist id="tipoOptions">
				@foreach (var tipo in Tipos)
				{
					<option value="@tipo"></option>
				}
			</datalist>
		</div>

		<button type="submit" class="btn btn-success">Guardar</button>
		<button type="button" class="btn btn-secondary ms-2" @onclick="CancelarFormulario">Cancelar</button>
	</EditForm>
}

@code {
	private List<VehiculoResponse> vehiculos;
	private VehiculoRequest vehiculoFormulario = new();
	private bool mostrarFormulario = false;
	private bool loading = true;
	private string errorMessage = "";
	List<string> Colores = new List<string>();
	List<string> Modelos = new List<string>();
	List<string> Marcas = new List<string>();
	List<string> Tipos = new List<string>();


	protected override async Task OnInitializedAsync()
	{
		await CargarVehiculos();
		Tipos = VehiculoServicio.ObtenerTiposAutos();
		Modelos = VehiculoServicio.ObtenerModelosAutos();
		Colores = VehiculoServicio.ObtenerColores();
		Marcas = VehiculoServicio.ObtenerMarcasAutos();

	}

	private async Task CargarVehiculos()
	{
		loading = true;
		errorMessage = "";
		try
		{
			var result = VehiculoServicio.ObtenerVehiculos(1); // Cambia el ClientId según corresponda
			if (result.Succeeded)
			{
				vehiculos = result?.Data?.ToList() ?? new();
			}
			else
			{
				errorMessage = result.Message;
			}
		}
		catch (Exception ex)
		{
			errorMessage = $"Error al cargar los vehículos: {ex.Message}";
		}
		finally
		{
			loading = false;
		}
		StateHasChanged();
	}

	private void MostrarFormularioAgregar()
	{
		vehiculoFormulario = new VehiculoRequest();
		mostrarFormulario = true;
		StateHasChanged();

	}

	private async Task GuardarVehiculo()
	{
		vehiculoFormulario.ClienteId = 1;// Sustituir por cliente id

		if (vehiculoFormulario.Id == 0) // Nuevo vehículo
		{

			var result = await VehiculoServicio.AgregarVehiculo(vehiculoFormulario);
			if (result.Succeeded)
			{
				await CargarVehiculos();
			}
			else
			{
				errorMessage = result.Message;
			}
		}
		else // Actualizar vehículo
		{
			var result = await VehiculoServicio.ActualizarVehiculo(vehiculoFormulario);
			if (result.Succeeded)
			{
				await CargarVehiculos();
			}
			else
			{
				errorMessage = result.Message;
			}
		}
		CancelarFormulario();
		StateHasChanged();

	}

	private void EditarVehiculo(int id)
	{
		var vehiculo = vehiculos.FirstOrDefault(v => v.Id == id);
		if (vehiculo != null)
		{
			vehiculoFormulario = new VehiculoRequest
				{
					Id = vehiculo.Id,
					Placa = vehiculo.Placa,
					Marca = vehiculo.Marca,
					Modelo = vehiculo.Modelo,
					Color = vehiculo.Color,
					Tipo = vehiculo.Tipo,
					ClienteId = vehiculo.ClienteId
				};
			mostrarFormulario = true;
		}
		StateHasChanged();

	}

	private async Task EliminarVehiculo(int id)
	{
		var result = await VehiculoServicio.EliminarVehiculo(id);
		if (result.Succeeded)
		{
			await CargarVehiculos();
		}
		else
		{
			errorMessage = result.Message;
		}
		StateHasChanged();

	}

	private void CancelarFormulario()
	{
		mostrarFormulario = false;
		vehiculoFormulario = new VehiculoRequest();
	}
}

