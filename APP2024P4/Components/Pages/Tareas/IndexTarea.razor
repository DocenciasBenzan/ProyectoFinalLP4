@rendermode InteractiveServer
@attribute [StreamRendering]
@page "/tareas"

@if (ShowForm)
{
    <div class="card">
        <h5 class="card-header text-center">@Accion Tarea</h5>
        <div class="card-body">
            @if (@ShowSelect)
            {
                <div class="mb-3">
                    <label class="form-label">Colaboradores</label>
                    <input @bind="SelectedEmail" class="form-control" list="datalistOptions" id="exampleDataList" placeholder="Type to search..." disabled="@DisableInputs">
                    <datalist class="mb-3" id="datalistOptions">
                        @foreach (var UserEmail in Emails)
                        {
                            <option value="@UserEmail">
                                @UserEmail
                            </option>
                        }
                    </datalist>
                    <span @onclick="()=>SendInvitacion(tareaIdActual)" class="btn btn-outline-primary">Enviar Invitacion</span>

                </div>
            }
            else
            {
                <div class="mb-3">
                    <label for="nombre" class="form-label">Titulo</label>
                    <input @bind-value="MiTarea.Titulo" type="text" class="form-control" id="nombre" placeholder="Nombre" disabled="@DisableInputs">
                </div>
                <div class="mb-3">
                    <label for="descripcion" class="form-label">Descripción</label>
                    <textarea @bind="MiTarea.Descripcion" class="form-control" id="descripcion" rows="3" disabled="@DisableInputs"></textarea>
                </div>
                <div class="mb-3">
                    <label for="exampleFormControlTextarea1" class="form-label">Prioridad</label>
                    <select class="form-select" aria-label="Default select example" @bind="@MiTarea.Prioridad" disabled="@DisableInputs" placeholder="Prioridad">
                        <option selected disabled>Seleccione </option>
                        @foreach (var Prioridad in Enum.GetValues(typeof(Prioridad)))
                        {
                            <option value="@Prioridad">
                                @Prioridad.ToString()
                            </option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label for="exampleFormControlTextarea1" class="form-label">Estado</label>
                    <select class="form-select" aria-label="Default select example" @bind="@MiTarea.Estado" disabled="@DisableInputs" placeholder="Estado">
                        <option selected disabled>Seleccione</option>
                        @foreach (var Estado in Enum.GetValues(typeof(Estado)))
                        {
                            <option value="@Estado">
                                @Estado.ToString()
                            </option>

                        }
                    </select>
                </div>

                <div class="mb-3 " disabled="@DisableInputs">
                    <label for="exampleFormControlInput1" class="form-label">Fecha Limite</label>
                    <div class="mb-3">
                        <InputDate @bind-Value="MiTarea.FechaLimite" class="form-control" disabled="@DisableInputs" />
                    </div>
                    @if (Accion != Constants.Acciones.Ver)
                    {
                        <span class="btn btn-primary" @onclick="Aceptar">Aceptar</span> 
                    }
                    <span class="btn btn-danger" @onclick="btnCancelarClick">@(Accion != Constants.Acciones.Ver ? "Cancelar" : "Salir")</span>
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="card text-bg-dark mb-3" style="max-width: auto;">
        <div class="card-header">
            Tareas en procesos
            <span class="btn btn-success" @onclick="btnAgregarClick">+</span>
        </div>
        <div class="card-body">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Titulo</th>
                        <th scope="col">Descripcion</th>
                        <th scope="col">Prioridad</th>
                        <th scope="col">Estado</th>
                        <th scope="col">Fecha de Creacion</th>
                        <th scope="col">Fecha Limite</th>
                        <th scope="col">Action</th>
                        <th scope="col">AgregarColaborador</th>
                        <th scope="col">Finalizar</th>

                    </tr>
                </thead>
                <tbody>
                    @if (TareaList?.Count > 0)
                    {
                        @foreach (var p in TareaList)
                        {
                            <tr>
                                <th scope="row">@p.Id</th>
                                <td>@p.Titulo</td>
                                <td>@p.Descripcion</td>
                                <td>@p.Prioridad</td>
                                <td>@p.Estado</td>
                                <td>@p.FechaCreacion?.ToShortDateString()</td>
                                <td>@p.FechaLimite?.ToShortDateString()</td>
                                <td>
                                    <div class="btn-group" role="group" aria-label="Basic mixed styles example">
                                        <span @onclick="()=>btnEditarClick(p)" class="btn btn-outline-warning">Editar</span>
                                        <span @onclick="()=>btnEliminarClick(p)" class="btn btn-outline-danger">Eliminar</span>
                                        <span @onclick="()=>btnVerClick(p)" class="btn btn-outline-primary">Ver</span>
                                    </div>
                                </td>
                                <td>
                                    <span @onclick="()=>btnAgregarColaborador(tareaIdActual = p.Id)" class="btn btn-outline-danger">AgregarColaborador</span>
                                </td>
                                <td>
                                    <span @onclick="()=>btnVerClick(p)" class="btn btn-outline-primary">TareaCompletada</span>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
}
@code {

    private ClaimsPrincipal? currentUser;
    private DateTime selectedDate = DateTime.Now;
    public string Accion { get; set; } = "Registrar";
    public TareaRequest MiTarea { get; set; } = new();
    public List<TareaDto>? TareaList { get; set; }
    bool ShowForm = false, DisableInputs = false, ShowSelect = false;
    private List<string> Emails = new();
    private string SelectedEmail = null!;
    private string CurrentUserEmail = null!;
    public NotifiacioRequest MiNotificacion { get; set; } = new();
    public List<ColaboradorDto> Colaboradores { get; set; } = new();
    public int tareaIdActual;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUser = authState.User;
        var user = authState.User;


        if (currentUser.Identity is { IsAuthenticated: true })
        {
            await Consultar();
            CurrentUserEmail = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value!;
        }
    }

    public async void btnAgregarClick()
    {
        Accion = Constants.Acciones.Registrar;
        ShowForm = true;
        StateHasChanged();
        DisableInputs = false;
        MiTarea.FechaCreacion = DateTime.Now;
        await Tiempo();
    }

    public void btnEditarClick(TareaDto dto)
    {
        Accion = Constants.Acciones.Modificar;
        ShowForm = true;
        DisableInputs = false;
        MiTarea = dto.ToRequest();
    }

    public void btnEliminarClick(TareaDto dto)
    {
        Accion = Constants.Acciones.Eliminar;
        ShowForm = true;
        DisableInputs = true;
        MiTarea = dto.ToRequest();
    }

    public void btnVerClick(TareaDto dto)
    {
        Accion = Constants.Acciones.Ver;
        ShowForm = true;
        DisableInputs = true;
        MiTarea = dto.ToRequest();
    }

    public void btnCancelarClick()
    {
        Limpiar();
    }

    public async Task btnAgregarColaborador(int tareaId)
    {
        await ConsultarUser();
        ShowSelect = true;
        ShowForm = true;
        Accion = Constants.Acciones.AgregarColabor;
        tareaId = tareaIdActual;
    }

    public async Task<Result> SendInvitacion(int tareaId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = currentUser?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId)) return Result.Success("");

        if (user.Identity!.IsAuthenticated)
        {
            CurrentUserEmail = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value!;
            if (!string.IsNullOrEmpty(SelectedEmail))
            {
                MiNotificacion.SenderEmail = CurrentUserEmail;
                MiNotificacion.RenderEmail = SelectedEmail;
                MiNotificacion.Message = "¿Quieres colaborar en esta tarea?";
                MiNotificacion.TareaId = tareaId;
                MiNotificacion.FechaCreacion = DateTime.Now;
                await NotificationService.SendNotificationAsync(MiNotificacion, userId, tareaId, SelectedEmail);
                Limpiar();
                return Result.Success("");     
            }
        }
        return Result.Success("");
    }

    async Task Consultar()
    {
        if (currentUser is not { Identity.IsAuthenticated: true }) return;

        var userId = currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value; 
        if (string.IsNullOrEmpty(userId)) return;

        var result = await service.GetById(userId); 

        if (result.Succesd)
        {
            TareaList =
           result.Data?.ToList()
           ??
           new List<TareaDto>();
        }
        else
        {
            TareaList = new(); 
            Console.WriteLine(result.Message);
        }
    }

    async Task ConsultarUser()
    {

        var result = await UserService.GetAllUserEmailsAsync(CurrentUserEmail);
        if (result.Succesd)
        {
            Emails =
            result.Data?.ToList()
            ??
            new List<string>();
        }
    }

    public void Limpiar()
    {
        ShowForm = false;
        MiTarea = new();
        MiNotificacion = new();
    }

    public async Task Aceptar()
    {
        var userId = currentUser?.FindFirst(ClaimTypes.NameIdentifier)?.Value; 
        if (string.IsNullOrEmpty(userId)) return;
        Result r =
        Accion == Constants.Acciones.Registrar ? await service.Create(MiTarea,userId) :
        Accion == Constants.Acciones.Modificar ? await service.Update(MiTarea) :
        Accion == Constants.Acciones.Eliminar ? await service.Delete(MiTarea.Id) :
        Accion == Constants.Acciones.AgregarColabor ? Result.Success("") :
        Accion == Constants.Acciones.Ver ? Result.Success("") :
        Result.Failure("Accion no soportada");
        if (r.Succesd)
        {
            await Consultar();
            Limpiar();
        }
    }

    public async Task Tiempo()
    {
        if (MiTarea.FechaLimite < DateTime.Now.Date)
        {
            await jsRuntime.InvokeVoidAsync("alert", "La fecha límite no puede ser anterior al día de hoy.");
            return;
        }
    }
}
