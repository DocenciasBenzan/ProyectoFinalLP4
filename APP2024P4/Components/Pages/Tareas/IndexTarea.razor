@rendermode InteractiveServer
@attribute [StreamRendering]
@attribute [Authorize]

@page "/tareas"
@using APP2024P4.Components.Elements

@if (ShowForm)
{
    <div class="card d-print-none">
        <h5 class="card-header text-center">@Accion Tarea</h5>
        <div class="card-body">
            @if (ShowSelect)
            {
                <div class="mb-4">
                    <label class="form-label fw-bold">Seleccionar Colaborador</label>
                    <input @bind="SelectedEmail" class="form-control" list="datalistOptions" id="exampleDataList" placeholder="Buscar por Email">
                    <datalist id="datalistOptions">
                        @foreach (var UserEmail in Emails)
                        {
                            <option value="@UserEmail">@UserEmail</option>
                        }
                    </datalist>
                </div>
                <div class="d-flex justify-content-between">
                    <button class="btn btn-primary" @onclick="() => SendInvitacion(tareaIdActual)">
                        <i class="bi bi-envelope"></i> Enviar Invitación
                    </button>
                    <button class="btn btn-danger" @onclick="btnCancelarClick">
                        <i class="bi bi-x-circle"></i> Cancelar
                    </button>
                </div>
            }
            else
            {
                <form>
                    <div class="mb-3">
                        <label for="titulo" class="form-label fw-bold">Título</label>
                        <input @bind="MiTarea.Titulo" type="text" class="form-control" id="titulo" placeholder="Ingrese el título" disabled="@DisableInputs">
                    </div>
                    <div class="mb-3">
                        <label for="descripcion" class="form-label fw-bold">Descripción</label>
                        <textarea @bind="MiTarea.Descripcion" class="form-control" id="descripcion" rows="3" placeholder="Ingrese una descripción" disabled="@DisableInputs"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="prioridad" class="form-label fw-bold">Prioridad</label>
                        <select class="form-select" id="prioridad" @bind="MiTarea.Prioridad" disabled="@DisableInputs">
                            <option selected disabled>Seleccione</option>
                            @foreach (var Prioridad in Enum.GetValues(typeof(Prioridad)))
                            {
                                <option value="@Prioridad">@Prioridad.ToString()</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="estado" class="form-label fw-bold">Estado</label>
                        <select class="form-select" id="estado" @bind="MiTarea.Estado" disabled="@DisableInputs">
                            <option selected disabled>Seleccione</option>
                            @foreach (var Estado in Enum.GetValues(typeof(Estado)))
                            {
                                <option value="@Estado">@Estado.ToString()</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="fechaLimite" class="form-label fw-bold">Fecha Límite</label>
                        <InputDate @bind-Value="MiTarea.FechaLimite" class="form-control" id="fechaLimite" disabled="@DisableInputs" />
                    </div>
                    <div class="d-flex justify-content-end">
                        @if (Accion != Constants.Acciones.Ver)
                        {
                            <button type="button" class="btn btn-primary me-2" @onclick="Aceptar">
                                <i class="bi bi-check-circle"></i> Aceptar
                            </button>
                        }
                        <button type="button" class="btn btn-danger" @onclick="btnCancelarClick">
                            <i class="bi bi-x-circle"></i> @(Accion != Constants.Acciones.Ver ? "Cancelar" : "Salir")
                        </button>
                    </div>
                </form>
            }
        </div>
    </div>

}
else
{
    <div class="card mb-4 shadow-sm border-0">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0 d-print-none">Tareas en proceso</h5>
            <h1 class="d-none d-print-inline">Reporte de productos</h1>
            <div class="btn-group">
                <button class="btn btn-success d-print-none" @onclick="btnAgregarClick">
                    <i class="bi bi-plus"></i> Agregar
                </button>
                <PrintButton />
            </div>
        </div>
        <div class="card-body">
            <table class="table table-bordered table-striped table-hover">
                <thead class="bg-dark text-white">
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Título</th>
                        <th scope="col">Descripción</th>
                        <th scope="col">Prioridad</th>
                        <th scope="col">Estado</th>
                        <th scope="col">Creación</th>
                        <th scope="col">Límite</th>
                        <th class="d-print-none" scope="col">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (TareaList?.Count > 0)
                    {
                        int rowIndex = 1; 
                        @foreach (var p in TareaList)
                        {
                            <tr>
                                <th scope="row">@rowIndex</th> 
                                <td>@p.Titulo</td>
                                <td>@p.Descripcion</td>
                                <td>@p.Prioridad</td>
                                <td>@p.Estado</td>
                                <td>@p.FechaCreacion?.ToShortDateString()</td>
                                <td>@p.FechaLimite?.ToShortDateString()</td>
                                <td>
                                    <div class="btn-group d-print-none" role="group">
                                        <button class="btn btn-outline-warning btn-sm me-2" @onclick="() => btnEditarClick(p)">
                                            <i class="bi bi-pencil"></i> Editar
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm me-2" @onclick="() => btnEliminarClick(p,p.Id)">
                                            <i class="bi bi-trash"></i> Eliminar
                                        </button>
                                        <button class="btn btn-outline-primary btn-sm me-2" @onclick="() => btnVerClick(p)">
                                            <i class="bi bi-eye"></i> Ver
                                        </button>
                                        <button class="btn btn-outline-info btn-sm me-2" @onclick="() => btnAgregarColaborador(tareaIdActual = p.Id, p)">
                                            <i class="bi bi-person-plus"></i> Colaborador
                                        </button>
                                        <button class="btn btn-outline-success btn-sm me-5" @onclick="() => btnFinalizarClick(p.Id)">
                                            <i class="bi bi-check-circle"></i> Finalizar
                                        </button>
                                    </div>
                                </td>
                            </tr>
                            rowIndex++; 
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="8" class="text-center">No hay tareas disponibles</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

}
@code {

    private ClaimsPrincipal? currentUser;
    private DateTime selectedDate = DateTime.Now;
    public string Accion { get; set; } = "Registrar";
    public TareaRequest MiTarea { get; set; } = new();
    public List<TareaDto>? TareaList { get; set; }
    bool ShowForm = false, DisableInputs = false, ShowSelect = false;
    private List<string> Emails = new();
    private string SelectedEmail = null!;
    private string CurrentUserEmail = null!;
    public NotifiacioRequest MiNotificacion { get; set; } = new();
    public int tareaIdActual;
    public bool Tareacompletada;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUser = authState.User;

        if (currentUser!.Identity is { IsAuthenticated: true })
        {
            CurrentUserEmail = currentUser.FindFirst(c => c.Type == ClaimTypes.Email)?.Value!;
            await Consultar();
        }
    }

    public async void btnAgregarClick()
    {
        // Este método sirve para agregar una nueva tarea.
        Accion = Constants.Acciones.Registrar;
        ShowForm = true;
        StateHasChanged();
        DisableInputs = false;
        MiTarea.FechaCreacion = DateTime.Now;
        await Tiempo();
    }

    public void btnEditarClick(TareaDto dto)
    {
        // Este método sirve para editar una tarea existente.
        Accion = Constants.Acciones.Modificar;
        ShowForm = true;
        DisableInputs = false;
        MiTarea = dto.ToRequest();
    }

    public async Task btnEliminarClick(TareaDto dto, int Idtarea)
    {
        // Este método sirve para eliminar una tarea seleccionada.
        Accion = Constants.Acciones.Eliminar;
        ShowForm = true;
        DisableInputs = true;
        await ColaboradorService.Delete(Idtarea);
        MiTarea = dto.ToRequest();

    }

    public void btnVerClick(TareaDto dto)
    {
        // Este método sirve para visualizar los detalles de una tarea.
        Accion = Constants.Acciones.Ver;
        ShowForm = true;
        DisableInputs = true;
        MiTarea = dto.ToRequest();
    }

    public void btnCancelarClick()
    {
        // Este método sirve para cancelar la acción actual.
        Limpiar();
        ShowSelect = false;
    }

    public async Task btnFinalizarClick(int tareaId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = currentUser?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId)) return;
        if (user.Identity!.IsAuthenticated)
        { 
            await service.MarcarTareaComoCompletada(tareaId,userId);
        }
    }

    public async Task btnAgregarColaborador(int tareaId, TareaDto dto)
    {
        // Este método sirve para agregar un colaborador a una tarea.
        await ConsultarUser();
        ShowSelect = true;
        ShowForm = true;
        Accion = Constants.Acciones.AgregarColabor;
        tareaId = tareaIdActual;
        MiTarea = dto.ToRequest();
    }

    public async Task<Result> SendInvitacion(int tareaId)
    {
        // Este método sirve para enviar una invitación a un colaborador.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = currentUser?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId)) return Result.Success("");

        if (user.Identity!.IsAuthenticated)
        {
            CurrentUserEmail = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value!;
            if (!string.IsNullOrEmpty(SelectedEmail))
            {
                MiNotificacion.SenderEmail = CurrentUserEmail;
                MiNotificacion.RenderEmail = SelectedEmail;
                MiNotificacion.Message = "¿Quieres colaborar en esta tarea?";
                MiNotificacion.TareaId = tareaId;
                MiNotificacion.FechaCreacion = DateTime.Now;
                await NotificationService.SendNotificationAsync(MiNotificacion, userId, tareaId, SelectedEmail);
                Limpiar();
                return Result.Success("");
            }
        }
        return Result.Success("");
    }

    async Task Consultar()
    {
        // Este método sirve para consultar la lista de tareas del usuario actual.
        if (currentUser is not { Identity.IsAuthenticated: true }) return;

        var userId = currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId)) return;

        var result = await service.GetById(userId, Tareacompletada);

        if (result.Succesd)
        {
            TareaList =
           result.Data?.ToList()
           ??
           new List<TareaDto>();
        }
        else
        {
            TareaList = new();
            Console.WriteLine(result.Message);
        }
    }

    async Task ConsultarUser()
    {
        // Este método sirve para obtener la lista de correos de posibles colaboradores.
        var result = await UserService.GetAllUserEmailsAsync(CurrentUserEmail);
        if (result.Succesd)
        {
            Emails =
            result.Data?.ToList()
            ??
            new List<string>();
        }
    }

    public void Limpiar()
    {
        // Este método sirve para limpiar el formulario y las variables.
        ShowForm = false;
        MiTarea = new();
        MiNotificacion = new();
        SelectedEmail = "";
    }

    public async Task Aceptar()
    {
        // Este método sirve para confirmar la acción actual (crear, editar, eliminar).
        var userId = currentUser?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId)) return;
        Result r =
        Accion == Constants.Acciones.Registrar ? await service.Create(MiTarea, userId) :
        Accion == Constants.Acciones.Modificar ? await service.Update(MiTarea) :
        Accion == Constants.Acciones.Eliminar ? await service.Delete(MiTarea.Id) :
        Accion == Constants.Acciones.AgregarColabor ? Result.Success("") :
        Accion == Constants.Acciones.Ver ? Result.Success("") :
        Result.Failure("Accion no soportada");
        if (r.Succesd)
        {
            await Consultar();
            Limpiar();
        }
    }

    public async Task Tiempo()
    {
        // Este método sirve para validar que la fecha límite no sea anterior a la fecha actual.
        if (MiTarea.FechaLimite < DateTime.Now.Date)
        {
            await jsRuntime.InvokeVoidAsync("alert", "La fecha límite no puede ser anterior al día de hoy.");
            return;
        }
    }
}
