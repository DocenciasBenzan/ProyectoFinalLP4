<div class="card mb-4 shadow-sm border-0">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0 d-print-none">Tareas Completadas</h5>
            </div>
        </div>
<div class="card-body">
    <table class="table table-bordered table-striped table-hover">
        <thead class="bg-dark text-white">
            <tr>
                <th scope="col">#</th>
                <th scope="col">Título</th>
                <th scope="col">Descripción</th>
                <th scope="col">Prioridad</th>
                <th scope="col">Estado</th>
                <th scope="col">Creación</th>
                <th scope="col">Límite</th>
                <th class="d-print-none" scope="col">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @if (TareaList?.Count > 0)
            {
                int rowIndex = 1; 
                @foreach (var p in TareaList)
                {
                    <tr>
                        <th scope="row">@rowIndex</th> 
                        <td>@p.Titulo</td>
                        <td>@p.Descripcion</td>
                        <td>@p.Prioridad</td>
                        <td>@p.Estado</td>
                        <td>@p.FechaCreacion?.ToShortDateString()</td>
                        <td>@p.FechaLimite?.ToShortDateString()</td>
                        <td>
                            <div class="btn-group d-print-none" role="group">
                                <button class="btn btn-outline-danger btn-sm me-2" @onclick="() => btnEliminarClick(p,p.Id)">
                                    <i class="bi bi-trash"></i> Eliminar
                                </button>
                            </div>
                        </td>
                    </tr>
                    rowIndex++; 
                }
            }
            else
            {
                <tr>
                    <td colspan="8" class="text-center">No hay tareas disponibles</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private ClaimsPrincipal? currentUser;
    public TareaRequest MiTarea { get; set; } = new();
    public List<TareaDto>? TareaList { get; set; }
    private string CurrentUserEmail = null!;
    public bool Tareacompletada;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUser = authState.User;

        if (currentUser!.Identity is { IsAuthenticated: true })
        {
            CurrentUserEmail = currentUser.FindFirst(c => c.Type == ClaimTypes.Email)?.Value!;
            await Consultar();
        }
    }

    public async Task Consultar()
    {
        // Este método sirve para consultar la lista de tareas del usuario actual.
        if (currentUser is not { Identity.IsAuthenticated: true }) return;

        var userId = currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId)) return;

        var result = await service.GetByCompletedTarea(userId, Tareacompletada);

        if (result.Succesd)
        {
            TareaList =
           result.Data?.ToList()
           ??
           new List<TareaDto>();
        }
        else
        {
            TareaList = new();
            Console.WriteLine(result.Message);
        }
    }
    public async Task btnEliminarClick(TareaDto dto, int Idtarea)
    {
        // Este método sirve para eliminar una tarea seleccionada.
        await ColaboradorService.Delete(Idtarea);
        await Consultar();
    }
}

