@rendermode InteractiveServer
@attribute [StreamRendering]
@page "/productos"
@using APP2024P4.Components.Elements
@using APP2024P4.Data.Datos
@using APP2024P4.Data.Entities
@using System.Text
@using System.ComponentModel.DataAnnotations
@* @using Microsoft.AspNetCore.Authorization
@attribute [Authorize] *@
@*  Lo  voy a poner aqui, luego lo ubicar. Que codigo diosmiio *@
@*                  AGREGAR PRODUCTO *@

@* @MiProducto.CategoriaId
Modelo
@MiProducto.ModeloId

Imagen
@MiProducto.Imagen.Count() VS
@ImagenActual.Count() *@
@if (ShowForm)
{
	@* Formularion de accion*@
	<div class="card">
		<h5 class="card-h5">@Accion Producto</h5>
		<div class="card-body">
			<EditForm Model="@MiProducto" OnValidSubmit="Aceptar" FormName="FormProducto">
				<DataAnnotationsValidator />
				<!-- <ValidationSummary /> -->

				<div class="row">
					<div class="col-md-6 mb-3">
						<label class="form-label">Nombre:</label>
						<InputText class="form-control" id="nombre" @bind-Value="MiProducto.Nombre" disabled="@DisableInputs" />
						<ValidationMessage For="@(() => MiProducto.Nombre)" />
					</div>

					<div class="col-md-6 mb-3">
						<label for="categoria" class="form-label">Categoría</label>
						<select @bind="@MiProducto.CategoriaId" id="categoria" class="form-select" disabled="@DisableInputs">
							<option disabled selected>Seleccione una categoría</option>
							@if (Categorias != null)
							{
								@foreach (var categoria in Categorias)
								{
									<option value="@categoria.Id">@categoria.Nombre</option>
								}
							}
						</select>
						<ValidationMessage For="@(() => MiProducto.CategoriaId)" />
					</div>

					<div class="col-md-6 mb-3">
						<label for="marca" class="form-label">Marca</label>
						<InputSelect class="form-select" id="marca" disabled="@DisableInputs"
									 Value="@MarcaActualId"
									 ValueExpression="@(()=>MarcaActualId)"
									 ValueChanged="@((int x)=>OnMarcaChange(x))">
							<option disabled value="0" selected>Selecciona una Marca</option>
							@foreach (var marca in Marcas)
							{
								<option value="@marca.Id">@marca.Nombre</option>
							}
						</InputSelect>
					</div>

					<div class="col-md-6 mb-3">
						<label for="modelo" class="form-label">Modelo</label>
						<select @bind="@MiProducto.ModeloId" id="modelo" class="form-select" disabled="@DisableInputs">
							@if (MarcaActualId == 0)
							{
								<option selected disabled value="0">Selecciona una marca primero</option>
							}
							else
							{
								<option disabled>Selecciona el modelo</option>
							}
							@if (ModelosFiltrados != null)
							{
								@foreach (var modelo in ModelosFiltrados)
								{
									<option value="@modelo.Id">@modelo.Nombre</option>
								}
							}
						</select>
					</div>

					<div class="col-md-6 mb-3">
						<label class="form-label">Fecha:</label>
						<InputDate id="fechaLanzamiento" class="form-control" @bind-Value="MiProducto.FechaL"
								   max="2025-12-31" min="2000-01-01" disabled="@DisableInputs" />
						<ValidationMessage For="@(() => MiProducto.FechaL)" />
					</div>

					<div class="col-md-6 mb-3">
						<label for="color" class="form-label">Color</label>
						<input type="text" @bind-value="MiProducto.Color" class="form-control" id="color" placeholder="Color" disabled="@DisableInputs">
						<ValidationMessage For="@(() => MiProducto.Color)" />
					</div>

					<div class="col-md-6 mb-3">
						<label class="form-label">Cantidad:</label>
						<InputNumber class="form-control" id="cantidad" @bind-Value="MiProducto.Cantidad" disabled="@DisableInputs" />
						<ValidationMessage For="@(() => MiProducto.Cantidad)" />
					</div>

					<div class="col-md-6 mb-3">
						<label class="form-label">Precio:</label>
						<InputNumber class="form-control" id="precio" @bind-Value="MiProducto.Precio" disabled="@DisableInputs" />
						<ValidationMessage For="@(() => MiProducto.Precio)" />
					</div>
				</div>

				<div class="mb-3">
					<label for="descripcion" class="form-label">Descripción</label>
					<textarea @bind="MiProducto.Descripcion" class="form-control" id="descripcion" rows="3" disabled="@DisableInputs"></textarea>
				</div>

				<div class="mb-3">
					<label for="ImageUpload" class="form-label">Imagen:</label>
					<InputFile class="form-control" id="ImageUpload" OnChange="ImageLoad" accept=".jpeg, .png, .jpg" disabled="@DisableInputs" />
					<ValidationMessage For="@(() => MiProducto.Imagen)" />
					@if (!string.IsNullOrEmpty(ImagenActual))
					{
						<img src="@ImagenActual" alt="Imagen de @MiProducto.Nombre" class="img-fluid mt-3" />
					}
				</div>
				@if (Accion != Constants.Acciones.Ver)
				{
					<span class="btn btn-primary me-2" @onclick="Aceptar">Aceptar</span>
				}
				<span class="btn btn-danger" @onclick="btnCancelarClick">@(Accion != Constants.Acciones.Ver ? "Cancelar" : "Salir")</span>
			</EditForm>
		</div>
	</div>
}
else
{
	@if (ProductoList != null)
	{
		@* Formularion de los registros*@
		<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
		<div class="card">
			<div class="card-header">
				<div class="card-h5 d-print-none">
					<h2 style="text-align:center">Registrar Productos</h2>
				</div>

				<div class="text-center">
					<img src="/Icon/W&W Tech Inventory.jpg" alt="Icono" class="img-fluid mt-2 d-none d-print-inline" style="max-width: 150px; height: auto;" /><br />
					<br /><h1 class="d-none d-print-inline mt-2">Reporte de productos</h1>
				</div>

				<div class="d-print-none">
					<span class="btn btn-outline-light" @onclick="btnAgregarClick">
						<i class="bi bi-plus-circle"></i> Agregar Producto
					</span>
					<PrintButton />
				</div>

			</div>
			<div class="card-body">
				<div class="input-group w-25 mt-3 d-print-none">
					<input type="text" class="form-control" placeholder="Buscar producto..." @bind="searchText" @bind:event="oninput">
					<span class="input-group-text"><i class="bi bi-search"></i></span>
				</div>
				<table class="table mt-3">
					<thead>
						<tr>
							<th scope="col">#</th>
							<th scope="col">Nombre</th>
							<th scope="col">Modelo</th>
							<th scope="col">Categoría</th>
							<th scope="col">Precio</th>
							<th scope="col" class="d-print-none">Acciones</th>
						</tr>
					</thead>
					<tbody>
						@if (ProductoFiltradoList?.Count > 0)
						{
							@foreach (var p in ProductoFiltradoList)
							{
								<tr>
									<th scope="row">@p.Id</th>
									<td>@p.Nombre</td>
									<td>@p.Modelo.Nombre</td>
									<td>@p.Categoria.Nombre</td>
									<td>@p.PrecioText</td>
									<td>
										<div class="btn-group d-print-none" role="group" aria-label="Basic mixed styles example">
											<span @onclick="()=>btnEditarClick(p)" class="btn btn-secondary rounded me-2">
												<i class="bi bi-pencil"></i> Editar
											</span>
											<span @onclick="()=>btnEliminarClick(p)" class="btn btn-danger rounded me-2">
												<i class="bi bi-trash"></i> Eliminar
											</span>
											<span @onclick="()=>btnVerClick(p)" class="btn btn-primary rounded">
												<i class="bi bi-eye"></i> Ver
											</span>
										</div>
									</td>
								</tr>
							}
						}
						else
						{
							<tr>
								<td colspan="6" class="text-center">No se encontraron productos.</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
	}
	else
	{
		<p>Cargando...</p>
	}
}

@code {
	#region Propiedades del componente Index.Razor
	public List<CategoriaDatos> Categorias { get; set; } = new();
	public List<MarcaDatos> Marcas { get; set; } = new();
	public List<ModeloDatos> Modelos { get; set; } = new();
	private List<ModeloDatos> ModelosFiltrados { get; set; } = new List<ModeloDatos>();
	public string Accion { get; set; } = "Registrar";
	public ProductoRequest MiProducto { get; set; } = new();
	public int MarcaActualId { get; set; }
	public string messageImage { get; set; }
	public string ImagenActual { get; set; }


	public List<ProductoDatos>? ProductoList { get; set; } = new();
	bool ShowForm = false, DisableInputs = false;
	#endregion
	#region Metodos del ciclo de vida de la aplicacion (para este componente)
	protected override async Task OnInitializedAsync()
	{
		try
		{
			await ConsultarCategorias();
			await ConsultarMarcas();
			await ConsultarModelos();
			await Consultar();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error durante la inicialización: {ex.Message}");
		}
	}
	#endregion Metodos del ciclo de vida de la aplicacion (para este componente)

	#region Eventos
	private async Task ImageLoad(InputFileChangeEventArgs e)
	{
		try
		{
			var file = e.File;
			var contenType = file.ContentType;

			var espacio = Encoding.UTF8.GetByteCount($"data:{file.ContentType};base64,");

			var buffer = new byte[file.Size];
			await file.OpenReadStream(maxAllowedSize: 1048576).ReadAsync(buffer);

			string img = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";

			MiProducto.Imagen = img;
			ImagenActual = img;
			messageImage = $"{file.Name} was added";
		}
		catch (Exception ex)
		{
			messageImage = $"Error trying to add an Image: {ex.Message}";

		}
		finally
		{
			StateHasChanged();
		}

	}

	public void btnAgregarClick()
	{
		Accion = Constants.Acciones.Registrar;
		ShowForm = true;
		StateHasChanged();
		ImagenActual = "";
		DisableInputs = false;

	}
	public void btnEditarClick(ProductoDatos dto)
	{
		Accion = Constants.Acciones.Editar;
		ShowForm = true;
		DisableInputs = false;
		ImagenActual = dto.Imagen;
		MiProducto = dto.ToRequest();
	}
	public void btnEliminarClick(ProductoDatos dto)
	{
		Accion = Constants.Acciones.Eliminar;
		ShowForm = true;
		DisableInputs = true;
		ImagenActual = dto.Imagen;
		MiProducto = dto.ToRequest();

	}
	public void btnVerClick(ProductoDatos dto)
	{
		Accion = Constants.Acciones.Ver;
		ShowForm = true;
		DisableInputs = true;
		ImagenActual = dto.Imagen;
		MiProducto = dto.ToRequest();
	}
	public void btnCancelarClick()
	{
		Limpiar();
	}
	#endregion Eventos

	#region Métodos
	async Task ConsultarCategorias()
	{
		var result = await categoriaService.GetAll();
		if (result.Succesd)
		{
			Categorias =
			result.Data?.ToList()
			??
			new List<CategoriaDatos>();
		}
	}
	async Task ConsultarMarcas()
	{
		var result = await marcaService.GetAll();
		if (result.Succesd)
		{
			Marcas =
			result.Data?.ToList()
			??
			new List<MarcaDatos>();
		}
	}
	async Task ConsultarModelos()
	{
		var result = await modeloService.GetAll();
		if (result.Succesd)
		{
			Modelos =
			result.Data?.ToList()
			??
			new List<ModeloDatos>();
		}
	}
	async Task Consultar()
	{
		var result = await service.Get();
		if (result.Succesd)
		{
			ProductoList =
			result.Data?.ToList()
			??
			new List<ProductoDatos>();
		}
	}
	public void Limpiar()
	{
		ShowForm = false;
		MiProducto = new();
		ImagenActual = "";
	}
	private async Task OnMarcaChange(int MarcaId)
	{
		MarcaActualId = MarcaId;
		if (MarcaId != 0)
		{
			// Filtra modelos según la marca seleccionada
			ModelosFiltrados = Modelos.Where(m => m.MarcaId == MarcaId).ToList();
			MiProducto.ModeloId = ModelosFiltrados.Any() ? ModelosFiltrados[0].Id : 0;
		}
		else
		{
			ModelosFiltrados = new List<ModeloDatos>(); // Limpia si no hay marca seleccionada
		}
	}
	public async Task Aceptar()
	{
		MiProducto.Imagen = ImagenActual;

		Result r =
		Accion == Constants.Acciones.Registrar ? await service.Create(MiProducto) :
		Accion == Constants.Acciones.Editar ? await service.Update(MiProducto) :
		Accion == Constants.Acciones.Eliminar ? await service.Delete(MiProducto.Id) :
		Accion == Constants.Acciones.Ver ? Result.Success("") :
		Result.Failure("Accion no soportada");
		if (r.Succesd)
		{
			await Consultar();
			Limpiar();
		}
	}
	#endregion Métodos

	private string searchText { get; set; } = "";

	public List<ProductoDatos>? ProductoFiltradoList
	{
		get
		{
			if (string.IsNullOrWhiteSpace(searchText))
				return ProductoList;

			return ProductoList?
				.Where(p => p.Nombre.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
							p.Modelo.Nombre.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
							p.Categoria.Nombre.Contains(searchText, StringComparison.OrdinalIgnoreCase))
				.ToList();
		}
	}

	private DateTime? fechaLanzamiento { get; set; }
	private int? cantidad { get; set; } = 1;
}
