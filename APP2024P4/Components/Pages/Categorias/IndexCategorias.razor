@rendermode InteractiveServer
@attribute [StreamRendering]
@page "/categorias"
@using APP2024P4.Components.Elements
@using APP2024P4.Data.Datos
@* @using Microsoft.AspNetCore.Authorization
@attribute [Authorize] *@

@if (ShowForm)
{
    @* Formularion de accion*@
    <div class="card">
        <h5 class="card-h5">@Accion Categoría</h5>
        <div class="card-body">
            <div class="mb-3">
                <label for="nombre" class="form-label">Nombre</label>
                <input @bind-value="MiCategoria.Nombre" type="text" class="form-control" id="nombre" placeholder="Nombre">
            </div>
            @if (Accion != Constants.Acciones.Ver)
            {
                <span class="btn btn-primary me-2" @onclick="Aceptar">Aceptar</span>
            }
            <span class="btn btn-danger" @onclick="btnCancelarClick">@(Accion != Constants.Acciones.Ver ? "Cancelar" : "Salir")</span>
        </div>
    </div>
}
else
{
    @if (CategoriaList != null)
    {
        @* Formularion de los registros*@
        <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
        <div class="card">
            <div class="card-header">
                <div class="card-h5 d-print-none">
                    <h2 style="text-align:center">Registrar Categoría</h2>
                </div>

				<div class="text-center">
					<img src="/Icon/W&W_Tech Inventory.jpg" alt="Icono" class="img-fluid mt-2 d-none d-print-inline" style="max-width: 150px; height: auto;" /><br />
					<br /><h1 class="d-none d-print-inline mt-2">Reporte de categorías</h1>
				</div>

				<div class="d-print-none">
                    <span class="btn btn-outline-light" @onclick="btnAgregarClick">
						<i class="bi bi-plus-circle"></i> Agregar Categoría
					</span>
					<PrintButton />
				</div>
			</div>
            <div class="card-body">
                <div class="input-group w-25 mt-3 d-print-none">
                    <input type="text" class="form-control" placeholder="Buscar categoría..." @bind="searchText" @bind:event="oninput">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                </div>
                <table class="table mt-3">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Nombre</th>
                            <th scope="col" class="d-print-none">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (CategoriaFiltradoList?.Count > 0)
                        {
                            @foreach (var c in CategoriaFiltradoList)
                            {
                                <tr>
                                    <th scope="row">@c.Id</th>
                                    <td>@c.Nombre</td>
                                    <td>
                                        <div class="btn-group d-print-none" role="group" aria-label="Basic mixed styles example">
                                            <span @onclick="()=>btnEditarClick(c)" class="btn btn-secondary rounded me-2">
                                                <i class="bi bi-pencil"></i> Editar
                                            </span>
                                            <span @onclick="()=>btnEliminarClick(c)" class="btn btn-danger rounded d-print-none">
                                                <i class="bi bi-trash"></i> Eliminar
                                            </span>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center">No se encontraron productos.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <p>Cargando...</p>
    }
}
@code {
    #region Propiedades del componente Index.Razor
    public string Accion { get; set; } = "Registrar";
    public CategoriaRequest MiCategoria { get; set; } = new();
    private string searchText { get; set; } = ""; //filtro

    public List<CategoriaDatos>? CategoriaList { get; set; } = new();
    bool ShowForm = false, DisableInputs = false;
    #endregion Propiedades del componente Index.Razor

    #region Metodos del ciclo de vida de la aplicacion (para este componente)
    protected override async Task OnInitializedAsync()
    {

        try
        {
            await Consultar();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error durante la inicialización: {ex.Message}");
        }
    }
    #endregion Metodos del ciclo de vida de la aplicacion (para este componente)

    #region Eventos
    public void btnAgregarClick()
    {
        Accion = Constants.Acciones.Registrar;
        ShowForm = true;
        StateHasChanged();
        DisableInputs = false;
    }
    public void btnEditarClick(CategoriaDatos dto)
    {
        Accion = Constants.Acciones.Editar;
        ShowForm = true;
        DisableInputs = false;
        MiCategoria = dto.ToRequest();
    }
    public void btnEliminarClick(CategoriaDatos dto)
    {
        Accion = Constants.Acciones.Eliminar;
        ShowForm = true;
        DisableInputs = true;
        MiCategoria = dto.ToRequest();
    }
    public void btnCancelarClick()
    {
        Limpiar();
    }
    #endregion Eventos

    #region Métodos
    async Task Consultar()
    {
        var result = await categoriaService.GetAll();
        if (result.Succesd)
        {
            CategoriaList =
            result.Data?.ToList()
            ??
            new List<CategoriaDatos>();
        }
    }

    public List<CategoriaDatos>? CategoriaFiltradoList
    {
        get
        {
            if (string.IsNullOrWhiteSpace(searchText))
                return CategoriaList;

            return CategoriaList?
                .Where(c => c.Nombre.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    public void Limpiar()
    {
        ShowForm = false;
        MiCategoria = new();
    }
    public async Task Aceptar()
    {
        Result r =
        Accion == Constants.Acciones.Registrar ? await categoriaService.Create(MiCategoria) :
        Accion == Constants.Acciones.Editar ? await categoriaService.Update(MiCategoria) :
        Accion == Constants.Acciones.Eliminar ? await categoriaService.Delete(MiCategoria.Id) :
        Result.Success("");
        Result.Failure("Accion no soportada");
        if (r.Succesd)
        {
            await Consultar();
            Limpiar();
        }
    }
    #endregion Métodos
 
}