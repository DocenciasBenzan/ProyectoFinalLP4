@page "/Account/Login"
hola
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using APP2024P4.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="px-5 py-5 p-lg-0">
    <div class="d-flex justify-content-center">
        <div class="col-12 col-md-9 col-lg-7 min-h-lg-screen d-flex flex-column justify-content-center py-lg-16 px-lg-20 position-relative">
            <div class="row">
                <div class="col-lg-10 col-md-9 col-xl-7 mx-auto">
                    <div class="text-center mb-12">
                        <span class="d-inline-block d-lg-block h1 mb-lg-6 me-3">👋</span>
                        <h1 class="ls-tight font-bolder h2">Welcome back!</h1>
                        <p class="mt-2">Let's build something great</p>
                    </div>

                    <section>
                        <StatusMessage Message="@errorMessage" />
                        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                            <DataAnnotationsValidator />
                            <h2>Use your account to log in.</h2>
                            <hr />
                            <ValidationSummary class="text-danger" role="alert" />
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                                <label for="email" class="form-label">Email</label>
                                <ValidationMessage For="() => Input.Email" class="text-danger" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                                <label for="password" class="form-label">Password</label>
                                <ValidationMessage For="() => Input.Password" class="text-danger" />
                            </div>
                            <div class="checkbox mb-3">
                                <label class="form-label">
                                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                                    Remember me
                                </label>
                            </div>
                            <div>
                                <button type="submit" class="btn btn-primary w-100">Log in</button>
                            </div>
                        </EditForm>
                    </section>
                    
                    <div class="py-5 text-center">
                        <span class="text-xs text-uppercase font-semibold">or</span>
                    </div>
                    
                    <section>
                        <div>
                            <h3>Use another service to log in.</h3>
                            <hr />
                            <ExternalLoginPicker />
                        </div>
                    </section>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("Account/LoginWith2fa", new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
