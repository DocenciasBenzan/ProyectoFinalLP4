@rendermode InteractiveServer
@attribute [StreamRendering]

@page "/buscar"
@using ProyectoLP4.web.Models;

<h2>Buscar</h2>

<input type="text" @bind="query" class="form-control" placeholder="Busque una pelicula o serie" />
<span class="btn btn-outline-success mt-2 mb-3" @onclick="BuscarPeliculas">
	<i class="bi bi-search"></i>
	Buscar
</span>

<style>

	/* General */
	body {
		font-family: 'Arial', sans-serif;
		line-height: 1.6;
		background-color: #f5f5f5;
		color: #333;
		margin: 0;
	}

	img {
		cursor: pointer;
	}

	/* Loading text */
	p {
		font-size: 1.2em;
		color: #888;
		text-align: center;
		margin-top: 50px;
	}

	/* Movie List */
	ul {
		list-style: none;
		padding: 0;
		margin: 20px 0;
	}

		ul li {
			margin: 10px 0;
			font-size: 1.1em;
		}

			ul li a {
				text-decoration: none;
				color: #007bff;
				font-weight: bold;
				transition: color 0.3s ease;
			}

				ul li a:hover {
					color: #0056b3;
				}

	/* Selected Movie Details */
	h4 {
		font-size: 1.5em;
		color: #444;
		margin-bottom: 10px;
	}

	p {
		font-size: 1.2em;
		color: #555;
		margin: 10px 0 20px;
	}

	/* Dropdown */
	select {
		padding: 10px;
		font-size: 1em;
		border: 1px solid #ccc;
		border-radius: 5px;
		background-color: #fff;
		width: 100%;
		max-width: 300px;
		margin-top: 10px;
	}

		select:focus {
			outline: none;
			border-color: #007bff;
			box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
		}

	/* Titles */
	h5 {
		font-size: 1.3em;
		color: #333;
		margin-top: 30px;
	}

</style>

@if (IsLoading)
{
	<p>Cargando...</p>
}

@if (Movies != null && Movies.Any())
{
	<div class="container">
		<div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
			@foreach (var movie in Movies)
			{
				<div class="card">
					<span class="btn btn-outline-dark mt-2" @onclick="()=>{MostrarDetalles(movie);}">
						<i class="bi bi-file-plus"></i>
					</span>
					@if (TituloSeleccionado?.TMDbId == movie.TMDbId)
					{
						<div class="mb-3">
							<label for="lista" class="form-label"> Agregar a:</label>
							<select id="lista" class="form-select" @bind="SelectedListId">
								<option selected disabled value="">-- Selecciona una lista --</option>
								@foreach (var list in UserLists)
								{
									<option value="@list.Id">@list.Name</option>
								}
							</select>
						</div>
						<div class="btn btn-group">
							<span class="btn btn-success mt-2 col-9" @onclick="AgregarALista" disabled="@(!CanAddToList)">Agregar</span>
							<span class="btn btn-outline-dark mt-2" @onclick="CancelarAgregarALista">Cancelar</span>
						</div>
					}
					<CompMovie movie="movie"></CompMovie>
				</div>
			}
		</div>

	</div>
}

@if (Movies == null || !Movies.Any())
{
	@* <div class="card m-5 ">
		<div class="card-header text-info"> <i class="bi bi-ban"></i> Sin resultados </div>
		<div class="card-body">
			<img class="h-50 w-25" src="/bootstrap/NoFoundResult.png" />
		</div>
	</div> *@
	@if (AntesPrimeraBusqueda)
	{
		<div class="m-5 justify-content-center text-center">
			<div class="text-success"> Realiza una busqueda </div>
			<img class="h-50 w-25 m-5" src="/bootstrap/HacerBusqueda.png" />

		</div>
	}
	else
	{
		<div class="m-5 justify-content-center text-center">
			<div class="text-success"><i class="bi bi-ban"></i> Sin resultados </div>
			<img class="h-50 w-25 m-5" src="/bootstrap/NoFoundResult.png" />
		</div>
	}
}

@code {
	/// <summary>
	/// Metodos generales.
	/// </summary>
	private string query; // Representa la busqueda.
	private bool IsLoading; // Para mostrar cuando esta cargando.
	private List<Movie> Movies = new(); //Para usar las propiedades de la entidad Movie.
	private Movie TituloSeleccionado; // Representa el titulo seleccionado.

	/// <summary>
	/// Metodos para agregar a listas.
	/// </summary>
	private List<UserList> UserLists = new(); // Para usar la entidad UserList.
	private int? SelectedListId; // Identifica la lista seleccionada por su ID.
	private bool CanAddToList => TituloSeleccionado != null && SelectedListId.HasValue; // Metodo que define si es posible guardar en una lista.

	public bool AntesPrimeraBusqueda { get; set; } = true; // Para identificar el estado de la barra de busqueda.


	private List<Movie> resultados;

	/// <summary>
	/// Para cargar datos al iniciar la pagina.
	/// </summary>
	/// <returns>Carga las listas guardadas en la base de datos.</returns>
	protected override async Task OnInitializedAsync()
	{
		var r = await ListService.GetListsAsync();
		if (r.Succeeded)
		{
			UserLists = r?.Data?.ToList() ?? new();
		}
	}


	/// <summary>
	/// Metodo para obtener los posters de los titulos.
	/// </summary>
	/// <param name="posterPath"></param>
	/// <returns>Almacena el valor de los posters</returns>
	private string GetPosterUrl(string posterPath)
	{
		if (string.IsNullOrEmpty(posterPath))
			return "https://via.placeholder.com/100x150?text=No+Image"; // Imagen de reemplazo por si no hay póster

		return $"https://image.tmdb.org/t/p/w200{posterPath}"; // "w200" es para ajustar el tamaño de imagen
	}

	/// <summary>
	/// Función para buscar peliculas y series.
	/// </summary>
	/// <returns>Titulos acorde a lo digitado en la barra de busqueda.</returns>
	private async Task BuscarPeliculas()
	{
		if (string.IsNullOrWhiteSpace(query))
		{
			Console.WriteLine("El campo esta vacio");
			AntesPrimeraBusqueda = true;

			return;
		}
		AntesPrimeraBusqueda = false;

		IsLoading = true;

		try
		{
			Movies = await TmdbService.SearchTitlesAsync(query);
			Console.WriteLine($"Se encontraron {Movies.Count} resultados para '{query}'.");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error al buscar películas: {ex.Message}");
		}
		finally
		{
			IsLoading = false;
		}
	}

	/// <summary>
	/// Función para mostrar detalles.
	/// </summary>
	/// <param name="movie"></param>
	/// Representa el titulo seleccionado a la hora de mostrar detalles.
	private void MostrarDetalles(Movie movie)
	{
		TituloSeleccionado = movie;
	}

	/// <summary>
	/// Función para agregar titulos a las listas.
	/// </summary>
	/// <returns>Titulos agregados a las listas ya creadas</returns>
	private async Task AgregarALista()
	{
		if (CanAddToList)
		{
			TituloSeleccionado.Poster_path = GetPosterUrl(TituloSeleccionado.Poster_path);
			TituloSeleccionado.Release_date = TituloSeleccionado.Release_date ?? "";
			TituloSeleccionado.Name = TituloSeleccionado.Name ?? "";
			TituloSeleccionado.Title = TituloSeleccionado.Title ?? "";

			await ListService.AddMovieToListAsync(SelectedListId.Value, TituloSeleccionado);
			if (TituloSeleccionado.Poster_path == "https://via.placeholder.com/100x150?text=No+Image")
			{
				TituloSeleccionado.Poster_path = string.Empty;
			}
			// ( drop hide )
			SelectedListId = null; //Reinicia el dropdown
			Console.WriteLine($"'{TituloSeleccionado.Title}' agregado a la lista con exito.");
			StateHasChanged();
		}
	}

	/// <summary>
	/// Función para cerrar el menu de agregar listas.
	/// </summary>
	private void CancelarAgregarALista()
	{
		TituloSeleccionado = null;
		StateHasChanged();
	}
}
