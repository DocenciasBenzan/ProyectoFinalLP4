@rendermode InteractiveServer
@attribute [StreamRendering]

@page "/buscar"
@using ProyectoLP4.web.Models;

<h2>Buscar</h2>



<input type="text" @bind="query" class="form-control" placeholder="Busque una pelicula o serie" />
<span class="btn btn-outline-primary mt-2" @onclick="BuscarPeliculas">Buscar</span>

<style>

    /* General */
    body {
        font-family: 'Arial', sans-serif;
        line-height: 1.6;
        background-color: #f5f5f5;
        color: #333;
        margin: 0;
        padding: 20px;
    }

    img {
        cursor: pointer;
    }

    /* Loading text */
    p {
        font-size: 1.2em;
        color: #888;
        text-align: center;
        margin-top: 50px;
    }

    /* Movie List */
    ul {
        list-style: none;
        padding: 0;
        margin: 20px 0;
    }

        ul li {
            margin: 10px 0;
            font-size: 1.1em;
        }

            ul li a {
                text-decoration: none;
                color: #007bff;
                font-weight: bold;
                transition: color 0.3s ease;
            }

                ul li a:hover {
                    color: #0056b3;
                }

    /* Selected Movie Details */
    h4 {
        font-size: 1.5em;
        color: #444;
        margin-bottom: 10px;
    }

    p {
        font-size: 1.2em;
        color: #555;
        margin: 10px 0 20px;
    }

    /* Dropdown */
    select {
        padding: 10px;
        font-size: 1em;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #fff;
        width: 100%;
        max-width: 300px;
        margin-top: 10px;
    }

        select:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        }

    /* Titles */
    h5 {
        font-size: 1.3em;
        color: #333;
        margin-top: 30px;
    }

</style>

@if (IsLoading)
{
    <p>Cargando...</p>
}

@if (Movies != null && Movies.Any())
{
    <ul>
        @foreach (var movie in Movies)
        {
            <li style="margin-bottom: 20px; display: flex; flex-direction: column; align-items: flex-start;">
                <div style="display: flex; align-items: center; background-color: #f8f9fa; border: 1px solid #e1e1e1; border-radius: 8px; padding: 10px; margin-bottom: 15px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                    <img src="@GetPosterUrl(movie.Poster_path)" alt="@movie.Title"
                         style="width: 100px; height: auto; margin-right: 15px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); cursor: pointer;"
                         @onclick="() => MostrarDetalles(movie)" />
                    <div>
                        <a @onclick="() => MostrarDetalles(movie)"
                           style="font-size: 1.2em; color: #007bff; font-weight: bold; text-decoration: none; cursor: pointer;">

                            @(!string.IsNullOrEmpty(movie.Title) ? movie.Title : movie.Name)

                        </a>
                        <p style="margin: 5px 0 0; font-size: 0.9em; color: #555;">

                            @(!string.IsNullOrEmpty(movie.Release_date) ? movie.Release_date : movie.First_air_date)

                        </p>
                        <p style="color: forestgreen; font-size: 0.9em; font-family: Consolas;"> Calificación: @movie.Vote_average</p>
                    </div>
                </div>


                @if (TituloSeleccionado?.TMDbId == movie.TMDbId)
                {
                    <div style="margin-top: 10px; padding: 10px; background-color: #f9f9f9; border: 1px solid #ddd; border-radius: 5px; width: 100%;">
                        <h4> @(!string.IsNullOrEmpty(TituloSeleccionado.Title) ? TituloSeleccionado.Title : TituloSeleccionado.Name)</h4>
                        <p>@TituloSeleccionado.Overview</p>
                        <p>@(!string.IsNullOrEmpty(TituloSeleccionado.Release_date) ? TituloSeleccionado.Release_date : TituloSeleccionado.First_air_date)</p>

                        <h5>Agregar a una lista</h5>
                        <select @bind="SelectedListId">
                            <option value="">-- Selecciona una lista --</option>
                            @foreach (var list in UserLists)
                            {
                                <option value="@list.Id">@list.Name</option>
                            }
                        </select>

                        <span class="btn btn-success mt-2" @onclick="AgregarALista" disabled="@(!CanAddToList)">Agregar</span>
                    </div>
                }
            </li>
        }
    </ul>
}


@* @if (TituloSeleccionado != null)
{
    <h4>@TituloSeleccionado.Title</h4>
    <p>@TituloSeleccionado.Overview</p>

    <h5>Agregar a una lista</h5>
    <select @bind="SelectedListId">
        <option value="">-- Selecciona una lista --</option>
        @foreach (var list in UserLists)
        {
            <option value="@list.Id">@list.Name</option>
        }
    </select>

    <span class="btn btn-success" @onclick="AgregarALista" disabled="@(!CanAddToList)">Agregar</span>
}
 *@
@if (Movies == null || !Movies.Any())
{
    <p> No hay resultados </p>
}

@code {
    private string query;
    private bool IsLoading;
    private List<Movie> Movies = new();
    private Movie TituloSeleccionado;

    private List<UserList> UserLists = new();
    private int? SelectedListId;
    private bool CanAddToList => TituloSeleccionado != null && SelectedListId.HasValue;

    //NEW
    private List<Movie> resultados;

    protected override async Task OnInitializedAsync()
    {
        var r = await ListService.GetListsAsync();
        if (r.Succeeded) {
            UserLists = r?.Data?.ToList() ?? new();
        }

    }

    private string GetPosterUrl(string posterPath)
    {
        if (string.IsNullOrEmpty(posterPath))
            return "https://via.placeholder.com/100x150?text=No+Image"; // Imagen de reemplazo por si no hay póster

        return $"https://image.tmdb.org/t/p/w200{posterPath}"; // "w200" es para ajustar el tamaño de imagen
    }


    private async Task BuscarPeliculas()
    {
        Console.WriteLine("BuscarPeliculas ejecutado.");

        if (string.IsNullOrWhiteSpace(query))
        {
            Console.WriteLine("El campo esta vacio");
            return;
        }


        IsLoading = true;

        try
        {
            Movies = await TmdbService.SearchTitlesAsync(query);
            Console.WriteLine($"Se encontraron {Movies.Count} resultados para '{query}'.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al buscar películas: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void MostrarDetalles(Movie movie)
    {
        TituloSeleccionado = movie;
    }

    private async Task AgregarALista()
    {
       
        if (CanAddToList)
        {
            TituloSeleccionado.Poster_path = GetPosterUrl(TituloSeleccionado.Poster_path);
            await ListService.AddMovieToListAsync(SelectedListId.Value, TituloSeleccionado);
            if (TituloSeleccionado.Poster_path == "https://via.placeholder.com/100x150?text=No+Image")
            {
                TituloSeleccionado.Poster_path = string.Empty;
            }
            // Esto no esta funcionando ( drop hide )
            SelectedListId = null; //Reinicia el dropdown
            Console.WriteLine($"'{TituloSeleccionado.Title}' agregado a la lista con exito.");
            StateHasChanged();
        }
    }


    private async Task BuscarPrueba()
    {
        Console.WriteLine($"Buscando: {query}");
        resultados = await TmdbService.SearchTitlesAsync(query);
        Console.WriteLine($"Resultados encontrados: {resultados.Count}");
    }
}
